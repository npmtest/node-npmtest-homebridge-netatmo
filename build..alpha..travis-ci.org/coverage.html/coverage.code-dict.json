{"/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/test.js":"/* istanbul instrument in package npmtest_homebridge_netatmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/lib.npmtest_homebridge_netatmo.js":"/* istanbul instrument in package npmtest_homebridge_netatmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_netatmo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_netatmo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-netatmo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_netatmo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_netatmo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_netatmo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_netatmo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_netatmo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_netatmo.__dirname + '/lib.npmtest_homebridge_netatmo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/index.js":"'use strict';\nvar homebridge\nvar NetatmoWeatherStationAccessory, NetatmoThermostatAccessory;\nvar async = require('async');\n\n// TODO: user info auswerten (metrisch /imperial ...)\n\nmodule.exports = function (pHomebridge) {\n\n  homebridge = pHomebridge;\n\n  homebridge.registerPlatform(\"homebridge-netatmo\", \"netatmo\", NetatmoPlatform);\n}\n\nvar netatmo = require(\"netatmo\");\nvar inherits = require('util').inherits;\n\nclass NetatmoPlatform {\n  constructor(log, config) {\n    this.log = log;\n    this.config = config || {};\n    this.foundAccessories = [];\n\n    // If this log message is not seen, most likely the config.js is not found.\n    this.log.debug('Creating NetatmoPlatform');\n\n    if (config.mockapi) {\n      this.log.warn('CAUTION! USING FAKE NETATMO API: ' + config.mockapi);\n      this.api = require(\"./lib/netatmo-api-mock\")(config.mockapi);\n    } else {\n      this.api = new netatmo(config[\"auth\"]);\n    }\n    this.api.on(\"error\", function (error) {\n      this.log.error('ERROR - Netatmo: ' + error);\n    }.bind(this));\n    this.api.on(\"warning\", function (error) {\n      this.log.warn('WARN - Netatmo: ' + error);\n    }.bind(this));\n  }\n\n  accessories(callback) {\n    this.log.debug(\"Loading accessories\");\n\n    var calls = this.loadDevices();\n  \n    async.parallel(calls, function(err, result) {\n      if (err) {\n        this.log(\"Error: \" + err);\n      } else {\n        for (var i = 0; i < result.length; i++) {\n          for (var j = 0; j < result[i].length; j++) {\n            this.foundAccessories.push(result[i][j]);\n          }\n        }\n      }\n      callback(this.foundAccessories);    \n    }.bind(this));\n  }\n\n  loadDevices() {\n    var deviceTypes = this.config.deviceTypes || [ \"weatherstation\", \"thermostat\", \"camera\" ];\n\n    var calls = [];\n\n    deviceTypes.forEach(function(deviceType) {\n      try {\n        calls.push(function(callback) {\n          var DeviceType = require('./device/' + deviceType + '-device.js')(homebridge);\n          var devType = new DeviceType(this.log, this.api, this.config);\n          devType.buildAccessoriesForDevices(function(err, deviceAccessories) {\n            callback(err, deviceAccessories);\n          });\n        }.bind(this));\n      } catch (err) {\n        this.log(\"Could not process device \" + deviceType);\n        this.log(err);\n        this.log(err.stack); \n      }\n    }.bind(this));\n\n    return calls;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/accessory/camera-accessory.js":"'use strict';\n\nconst DEFAULT_SERVICES = [\n        \"motionsensor-homekit\"\n      ];\n\nvar homebridge;\nvar Characteristic;\nvar NetatmoAccessory;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    NetatmoAccessory = require(\"../lib/netatmo-accessory\")(homebridge);\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class CameraAccessory extends NetatmoAccessory {\n    constructor(deviceData, netatmoDevice) {\n\n      var accessoryConfig = {\n        \"id\": deviceData.id,\n        // TODO: Check Modules in home!\n        \"netatmoType\": deviceData.type || 'camera',\n        \"firmware\": deviceData.firmware || 0.0,\n        \"name\": deviceData.name || \"Netatmo \" + netatmoDevice.deviceType + \" \" + deviceData._id,\n        \"defaultServices\": DEFAULT_SERVICES\n      }\n\n      super(homebridge, accessoryConfig, netatmoDevice);\n\n      this.motionDetected = false;\n      this.lastEventTimeStamp = 0;\n      this.refreshData(function(err, data) {});\n\n    }\n\n    refreshData(callback) {\n      this.device.refreshDeviceData(function (err, deviceData) {\n        if (!err) {\n          this.notifyUpdate(deviceData);\n        }\n        callback(err, deviceData);\n      }.bind(this));\n    }\n\n    notifyUpdate(deviceData) {\n      var accessoryData = this.extractAccessoryData(deviceData);\n      var homeData = this.mapAccessoryDataToCameraData(accessoryData);\n      this.applyHomeData(homeData);\n    }\n\n    extractAccessoryData(deviceData) {\n      return deviceData[this.id];\n    }\n\n    mapAccessoryDataToCameraData(accessoryData) {\n      // this.log(JSON.stringify(accessoryData));\n      var result = {};\n\n      var events = accessoryData.events;\n\n      var newLastEventTimeStamp = this.lastEventTimeStamp;\n\n      result.motionDetected = false;\n\n      if (events) {\n         events.forEach(function(event) {\n          if (event.time > newLastEventTimeStamp) {\n            newLastEventTimeStamp = event.time;\n          }\n          if (event.time > this.lastEventTimeStamp) {\n            result.motionDetected = result.motionDetected || this.eventIsMotion(event)\n          }\n        }.bind(this));\n        this.lastEventTimeStamp = newLastEventTimeStamp;\n      }\n\n      return result;\n    }\n\n    eventIsMotion(event) {\n      if (event.type == 'movement') {\n        return true;\n      }\n      if (event.type == 'person') {\n        return true;\n      }\n      if (event.type == 'outdoor') {\n        return true;\n      }\n      return false;\n    }\n\n    applyHomeData(homeData) {\n      var dataChanged = false\n\n      if(this.motionDetected != homeData.motionDetected) {\n        this.motionDetected = homeData.motionDetected;\n        dataChanged = true;\n      }\n\n      if (dataChanged) {\n        this.getServices().forEach(\n          function( svc ) {\n            svc.updateCharacteristics && svc.updateCharacteristics();\n          }\n        );\n      }\n\n    }\n\n  }\n\n  return CameraAccessory;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/accessory/thermostat-accessory.js":"'use strict';\n\nconst DEFAULT_SERVICES = [\n        \"thermostat-homekit\",\n        \"battery-homekit\"\n      ];\n\nconst MIN_BATTERY_LEVEL = 2800;\nconst LOW_BATTERY_LEVEL = 3000;\nconst FULL_BATTERY_LEVEL = 4100;\n\nvar homebridge;\nvar Characteristic;\nvar NetatmoAccessory;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    NetatmoAccessory = require(\"../lib/netatmo-accessory\")(homebridge);\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class ThermostatAccessory extends NetatmoAccessory {\n    constructor(deviceData, netatmoDevice) {\n\n      var accessoryConfig = {\n        \"id\": deviceData._id,\n        \"netatmoType\": deviceData.type,\n        \"firmware\": deviceData.firmware,\n        \"name\": deviceData.station_name || \"Netatmo \" + netatmoDevice.deviceType + \" \" + deviceData._id,\n        \"defaultServices\": DEFAULT_SERVICES\n//        \"dataTypes\"\n      }\n\n      super(homebridge, accessoryConfig, netatmoDevice);\n\n      this.module_id = deviceData.modules[0]._id;\n      this.currentTemperature = 11.1;\n      this.targetTemperature = 20.0;\n      this.batteryPercent = 100;\n      this.lowBattery = false;\n\n      this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.OFF;\n      this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.OFF;\n\n      this.refreshData(function(err, data) {});\n\n    }\n\n    refreshData(callback) {\n      this.device.refreshDeviceData(function (err, deviceData) {\n        if (!err) {\n          this.notifyUpdate(deviceData);\n        }\n        callback(err, deviceData);\n      }.bind(this));\n    }\n\n    notifyUpdate(deviceData) {\n      var accessoryData = this.extractAccessoryData(deviceData);\n      var thermostatData = this.mapAccessoryDataToThermostatData(accessoryData);\n      this.applyThermostatData(thermostatData);\n    }\n\n    extractAccessoryData(deviceData) {\n      return deviceData[this.id];\n    }\n\n    mapAccessoryDataToThermostatData(accessoryData) {\n      // this.log(JSON.stringify(accessoryData));\n      var result = {};\n      var module = accessoryData.modules[0];\n\n      if (module) {\n        result.currentTemperature = module.measured.temperature;\n\n        result.targetTemperature = 0;\n        if (module.measured.setpoint_temp) {\n          result.targetTemperature = module.measured.setpoint_temp;\n        }\n\n        var setpoint = module.setpoint;\n        if (setpoint) {\n          if (setpoint.setpoint_temp != undefined) {\n            result.targetTemperature = setpoint.setpoint_temp;\n            result.mode = setpoint.setpoint_mode;\n          }\n        }\n\n        if (result.targetTemperature < 10) result.targetTemperature = 10;\n\n        result.heating = (module.therm_relay_cmd != 0);\n        result.batteryPercent = module.battery_percent;\n\n        result.lowBattery = false;\n        if (module.battery_vp) {\n          if (!result.batteryPercent) {\n            result.batteryPercent = Math.min(Math.round(Math.max(module.battery_vp - MIN_BATTERY_LEVEL, 0) / (FULL_BATTERY_LEVEL - MIN_BATTERY_LEVEL) * 100), 100);\n          }\n          if (module.battery_vp < LOW_BATTERY_LEVEL) {\n            result.lowBattery = true;\n          }\n        }\n        if (!result.batteryPercent) {\n          result.batteryPercent = 100;\n        }\n      } else {\n        this.device.forceRefresh();\n      }\n      return result;\n    }\n\n    applyThermostatData(thermostatData) {\n      var dataChanged = false\n\n      if(thermostatData.currentTemperature && this.currentTemperature != thermostatData.currentTemperature) {\n        this.currentTemperature = thermostatData.currentTemperature;\n        dataChanged = true;\n      }\n\n      if(thermostatData.targetTemperature && this.targetTemperature != thermostatData.targetTemperature) {\n        this.targetTemperature = thermostatData.targetTemperature;\n        dataChanged = true;\n      }\n\n      if(thermostatData.mode && this.mode != thermostatData.mode) {\n        this.mode = thermostatData.mode;\n        switch(this.mode) {\n          case 'hg':\n            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.COOL;\n            break;\n          case 'max':\n            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.HEAT;\n            break;\n          case 'off':\n            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.OFF;          \n            break;\n          default: // manual, program\n            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.AUTO;        \n        }\n        dataChanged = true;\n      }\n\n      if(thermostatData.heating && this.heating != thermostatData.heating) {\n        this.heating = thermostatData.heating;\n        if (this.heating) {\n          this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.HEAT;\n        } else {\n          this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.OFF;\n        }\n        dataChanged = true;\n      }\n\n      if(thermostatData.batteryPercent && this.batteryPercent != thermostatData.batteryPercent) {\n        this.batteryPercent = thermostatData.batteryPercent;\n        dataChanged = true;\n      }\n\n      if(thermostatData.lowBattery && this.lowBattery != thermostatData.lowBattery) {\n        this.lowBattery = thermostatData.lowBattery;\n        dataChanged = true;\n      }\n\n      if (dataChanged) {\n        this.getServices().forEach(\n          function( svc ) {\n            svc.updateCharacteristics && svc.updateCharacteristics();\n          }\n        );\n      }\n    }\n\n    setThermpoint(mode, temperature, callback) {\n      this.device.api.setThermpoint({\n        device_id: this.id,\n        module_id: this.module_id,\n        setpoint_mode: mode,\n        setpoint_temp: temperature\n      }, function(err, value) { \n        this.device.forceRefresh();\n        callback(err, value);\n      }.bind(this));\n    }\n\n  }\n\n  return ThermostatAccessory;\n}","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/accessory/weatherstation-accessory.js":"'use strict';\n\nconst DEFAULT_SERVICES = [\n        \"temperature-homekit\",\n        \"humidity-homekit\",\n        \"co2-homekit\",\n        \"airquality-homekit\",\n        \"noiselevel-legacy\",\n        \"airpressure-legacy\",\n        \"rain-legacy\",\n        \"wind-legacy\",\n        \"battery-homekit\"\n////        \"eveweatherhistory-elgato\",\n////        \"eveweather-elgato\"\n      ];\n\nvar homebridge;\nvar Characteristic;\nvar NetatmoAccessory;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    NetatmoAccessory = require(\"../lib/netatmo-accessory\")(homebridge);\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class WeatherStationAccessory extends NetatmoAccessory {\n    constructor(deviceData, netatmoDevice) {\n\n      var dataTypes = deviceData.data_type;\n      if (deviceData.battery_vp) {\n        dataTypes.push(\"Battery\");\n      }\n\n      var accessoryConfig = {\n        \"id\": deviceData._id,\n        \"netatmoType\": deviceData.type,\n        \"firmware\": deviceData.firmware,\n        \"name\": deviceData._name || \"Netatmo \" + netatmoDevice.deviceType + \" \" + deviceData._id,\n        \"defaultServices\": DEFAULT_SERVICES,\n        \"dataTypes\": dataTypes\n      }\n\n      super(homebridge, accessoryConfig, netatmoDevice);\n\n      this.currentTemperature = 11.1;\n      this.co2 = 500;\n      this.batteryPercent = 100;\n      this.lowBattery = false;\n      this.airPressure = 1000;\n      this.humidity = 50;\n\t\t\tthis.noiseLevel = 0;\n      this.rainLevel = 0.0;\n      this.rainLevelSum1 = 0.0;\n      this.rainLevelSum24 = 0.0;\n      this.windStrength = 0;\n      this.windAngle = 0;\n      this.gustStrength = 0;\n      this.gustAngle = 0;\n \n      this.refreshData(function(err, data) {});\n  \t}\n\n  \trefreshData(callback) {\n      this.device.refreshDeviceData(function (err, deviceData) {\n        if (!err) {\n          this.notifyUpdate(deviceData);\n        }\n        callback(err, deviceData);\n      }.bind(this));\n    }\n\n    notifyUpdate(deviceData) {\n      var accessoryData = this.extractAccessoryData(deviceData);\n      var weatherData = this.mapAccessoryDataToWeatherData(accessoryData);\n      this.applyWeatherData(weatherData);\n    }\n\n    extractAccessoryData(deviceData) {\n      return deviceData[this.id];\n    }\n\n    getLowBatteryLevel() {\n      var levels = {\n        NAMain: 4560,\n        NAModule1: 4000,\n        NAModule2: 4360,\n        NAModule3: 4000,\n        NAModule4: 4560\n      }\n\n      if (levels[this.netatmoType]) {\n        return levels[this.netatmoType];\n      }\n      return 4560;\n    }\n\n    getFullBatteryLevel() {\n      var levels = {\n        NAMain: 5640,\n        NAModule1: 5500,\n        NAModule2: 5590,\n        NAModule3: 5500,\n        NAModule4: 5640\n      }\n\n      if (levels[this.netatmoType]) {\n        return levels[this.netatmoType];\n      }\n      return 5640;\n    }\n\n\n\t\tmapAccessoryDataToWeatherData(accessoryData) {\n\t\t  var result = {};\n\n\t\t  var dashboardData = accessoryData.dashboard_data; \n\t\t  if (dashboardData) {\n\t\t  \tif (dashboardData.Temperature) {\n          result.currentTemperature = dashboardData.Temperature;\n        }\n        if (dashboardData.CO2) {\n          result.co2 = dashboardData.CO2;\n        }\n        if (dashboardData.Pressure) {\n          result.airPressure = dashboardData.Pressure;\n        }\n        if (dashboardData.Humidity) {\n          result.humidity = dashboardData.Humidity;\n        }\n        if (dashboardData.Noise) {\n          result.noiseLevel = dashboardData.Noise;\n        }\n        if (dashboardData.Rain) {\n          result.rainLevel = Math.round(dashboardData.Rain * 1000) / 1000;\n        }\n        if (dashboardData.sum_rain_1) {\n          result.rainLevelSum1 = Math.round(dashboardData.sum_rain_1 * 1000) / 1000;\n        }\n        if (dashboardData.sum_rain_24) {\n          result.rainLevelSum24 = Math.round(dashboardData.sum_rain_24 * 1000) / 1000;\n        }\n        if (dashboardData.WindStrength) {\n          result.windStrength = Math.round(dashboardData.WindStrength);\n        }\n        if (dashboardData.WindAngle) {\n          result.windAngle = Math.round(dashboardData.WindAngle);\n        }\n        if (dashboardData.GustStrength) {\n          result.gustStrength = Math.round(dashboardData.GustStrength);\n        }\n        if (dashboardData.GustAngle) {\n          result.gustAngle = Math.round(dashboardData.GustAngle);\n        }\n\t\t  }\n\n      result.batteryPercent = accessoryData.battery_percent;\n      result.lowBattery = false;\n\n      if (accessoryData.battery_vp) {\n        if (!result.batteryPercent) {\n          var minBatteryLevel = this.getLowBatteryLevel();\n          result.batteryPercent = Math.min(Math.round(Math.max(accessoryData.battery_vp - minBatteryLevel, 0) / (this.getFullBatteryLevel() - minBatteryLevel) * 100), 100);\n        }\n        if (accessoryData.battery_vp < this.getLowBatteryLevel()) {\n          result.lowBattery = true;\n        }\n      }\n\n      if (!result.batteryPercent) {\n        result.batteryPercent = 100;\n      }\n\n    \treturn result;\n\t\t}\n\n    applyWeatherData(weatherData) {\n      var dataChanged = false\n\n      if(weatherData.currentTemperature && this.currentTemperature != weatherData.currentTemperature) {\n        this.currentTemperature = weatherData.currentTemperature;\n        dataChanged = true;\n      }\n      if(weatherData.co2 && this.co2 != weatherData.co2) {\n        this.co2 = weatherData.co2;\n        dataChanged = true;\n      }\n      if(weatherData.airPressure && this.airPressure != weatherData.airPressure) {\n        this.airPressure = weatherData.airPressure;\n        dataChanged = true;\n      }\n      if(weatherData.humidity && this.humidity != weatherData.humidity) {\n        this.humidity = weatherData.humidity;\n        dataChanged = true;\n      }\n\n      if(weatherData.noiseLevel && this.noiseLevel != weatherData.noiseLevel) {\n        this.noiseLevel = weatherData.noiseLevel;\n        dataChanged = true;\n      }\n\n      if(weatherData.rainLevel && this.rainLevel != weatherData.rainLevel) {\n        this.rainLevel = weatherData.rainLevel;\n        dataChanged = true;\n      }\n      if(weatherData.rainLevelSum1 && this.rainLevelSum1 != weatherData.rainLevelSum1) {\n        this.rainLevelSum1 = weatherData.rainLevelSum1;\n        dataChanged = true;\n      }\n      if(weatherData.rainLevelSum24 && this.rainLevelSum24 != weatherData.rainLevelSum24) {\n        this.rainLevelSum24 = weatherData.rainLevelSum24;\n        dataChanged = true;\n      }\n      if(weatherData.windStrength && this.windStrength != weatherData.windStrength) {\n        this.windStrength = weatherData.windStrength;\n        dataChanged = true;\n      }\n      if(weatherData.windAngle && this.windAngle != weatherData.windAngle) {\n        this.windAngle = weatherData.windAngle;\n        dataChanged = true;\n      }\n      if(weatherData.gustStrength && this.gustStrength != weatherData.gustStrength) {\n        this.gustStrength = weatherData.gustStrength;\n        dataChanged = true;\n      }\n      if(weatherData.gustAngle && this.gustAngle != weatherData.gustAngle) {\n        this.gustAngle = weatherData.gustAngle;\n        dataChanged = true;\n      }\n\n      if (dataChanged) {\n        this.getServices().forEach(\n          function( svc ) {\n            svc.updateCharacteristics && svc.updateCharacteristics();\n          }\n        );\n      }\n    }\n\n    isSupportedService(serviceType) {\n      var isConfigured = this.configuredServices.indexOf(serviceType) > -1;\n      if (!isConfigured) return false;\n\n      var serviceBasetype = serviceType.split('-')[0];\n\n      switch (serviceBasetype) {\n        case \"temperature\" :\n          return this.dataTypes.indexOf(\"Temperature\") > -1;\n        case \"airquality\" :\n          return this.dataTypes.indexOf(\"CO2\") > -1;\n        case \"co2\" :\n          return this.dataTypes.indexOf(\"CO2\") > -1;\n        case \"battery\" :\n          return this.dataTypes.indexOf(\"Battery\") > -1;;\n        case \"humidity\" :\n          return this.dataTypes.indexOf(\"Humidity\") > -1;;\n        case \"airpressure\" :\n          return this.dataTypes.indexOf(\"Pressure\") > -1;;\n        case \"noiselevel\" :\n          return this.dataTypes.indexOf(\"Noise\") > -1;;\n        case \"rain\" :\n          return this.dataTypes.indexOf(\"Rain\") > -1;;\n        case \"wind\" :\n          return this.dataTypes.indexOf(\"Wind\") > -1;;\n      }\n      return false;\n    }\n\n  }\n  return WeatherStationAccessory;\n}","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/device/camera-device.js":"'use strict';\n\nvar NetatmoDevice = require(\"../lib/netatmo-device\");\n\nvar homebridge;\nvar CameraAccessory;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    CameraAccessory = require(\"../accessory/camera-accessory\")(homebridge);\n  }\n\n  class CameraDeviceType extends NetatmoDevice {\n    constructor(log, api, config) {\n      super(log, api, config);\n      this.deviceType = \"camera\";\n    }\n\n    loadDeviceData(callback) {\n      this.api.getHomeData(function (err, homeData) {\n        if(!err) {\n          var deviceMap = {};\n          homeData.homes.forEach(function( home ) {\n            deviceMap[home.id] = home;\n          }.bind(this));\n          this.cache.set(this.deviceType, deviceMap);\n          this.deviceData = deviceMap;\n        }\n        callback(err, this.deviceData);\n      }.bind(this));\n    }\n\n    buildAccessory(deviceData) {\n      return new CameraAccessory(deviceData, this);\n    }\n\n  }\n\n  return CameraDeviceType;\n\n}","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/lib/netatmo-device.js":"'use strict';\n\nconst DEFAULT_CACHE_TTL = 10; // 10 seconds caching - use config[\"ttl\"] to override\n\nconst REFRESH_CHECK_RATE = 10 * 60 * 1000; // 10 minutes\nconst REFRESH_RUN_RATE = 20 * 1000; // 20 seconds\n\nvar NodeCache = require(\"node-cache\");\n\nclass NetatmoDevice {\n  constructor(log, api, config) {\n    this.api = api;\n    this.log = log;\n    var ttl = typeof config[\"ttl\"] !== 'undefined' ? config[\"ttl\"] : DEFAULT_CACHE_TTL;\n    this.cache = new NodeCache({stdTTL: ttl});\n    this.config = config;\n\n    this.deviceData = null;\n    this.accessories = [];\n    this.refreshRequired = false;\n    this.refreshRunning = false;\n    this.refreshCheckRunning = false;\n\n    this.runCheckInterval = setInterval(function() {\n      if(!this.refreshCheckRunning ) {\n        this.refreshCheckRunning = true;\n        if(this.refreshRequired) {\n          this.log.debug(\"Executing Timed Refresh\");\n\n          this.refreshRequired=false;\n          this.refreshDeviceData(function(err, data) {\n            if (this.accessories) {\n              this.accessories.forEach(function( accessory ) {\n                accessory.notifyUpdate(data);\n              }.bind(this));\n            }\n            this.refreshCheckRunning = false;\n          }.bind(this));\n        } else {\n          this.refreshCheckRunning = false;\n        }\n      }\n    }.bind(this), REFRESH_RUN_RATE);\n\n    this.refreshDataInterval = setInterval(function() {\n      this.refreshRequired = true;\n    }.bind(this), REFRESH_CHECK_RATE);\n\n  }\n\n  buildAccessoriesForDevices(callback) {\n    var accessories = [];\n    this.refreshDeviceData(function(err, data) {\n      if (!err) {\n        this.buildAccessories(callback);\n      } else {\n        callback(err, accessories);\n      }\n    }.bind(this));\n  }\n\n  refreshDeviceData(callback) {\n    this.log.debug(\"Refreshing data for netatmo \" + this.deviceType);\n    this.cache.get(this.deviceType, function (err, data) {\n      if (!err) {\n        if (data == undefined) {\n          this.log.debug(\"Loading new data from netatmo for \" + this.deviceType);\n          this.loadDeviceData(function(err, data) {\n            callback(err,data);\n          }.bind(this));\n        } else {\n          this.deviceData = data;\n          callback(null, data);\n        }\n      } else {\n        callback(err, this.deviceData);\n      }\n    }.bind(this));\n  }\n\n  forceRefresh() {\n    this.cache.del(this.deviceType, function(err,count) {\n      this.refreshRequired = true;\n    }.bind(this));\n  }\n\n  loadDeviceData(callback) {\n    this.deviceData = null;\n    callback(\"The abstract method loadDeviceData should be overridden\", null)\n  }\n\n  buildAccessories(callback) {   \n    Object.keys(this.deviceData).forEach(function(key) {\n\n      // key is id! Should go into blacklist / whitelist !\n\n      var keep = true;\n\n      if (this.config.whitelist && this.config.whitelist.length > 0) {\n        keep = (this.config.whitelist.indexOf(key) > -1);\n      }\n      if (this.config.blacklist && this.config.blacklist.length > 0) {\n        keep = keep && (this.config.blacklist.indexOf(key) < 0);\n      }\n\n      if ( keep ) {\n        var accessory = this.buildAccessory(this.deviceData[key]);\n        this.log.debug(\"Did build accessory \" + accessory.name );\n        this.accessories.push(accessory);\n      }\n\n\n    }.bind(this));\n    callback(null, this.accessories);\n  }\n\n}\n\nmodule.exports = NetatmoDevice;","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/device/thermostat-device.js":"'use strict';\n\nvar NetatmoDevice = require(\"../lib/netatmo-device\");\n\nvar homebridge;\nvar ThermostatAccessory;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    ThermostatAccessory = require(\"../accessory/thermostat-accessory\")(homebridge);\n  }\n\n  class ThermostatDeviceType extends NetatmoDevice {\n    constructor(log, api, config) {\n      super(log, api, config);\n      this.deviceType = \"thermostat\";\n    }\n\n    loadDeviceData(callback) {\n      this.api.getThermostatsData(function (err, devices) {\n        if(!err) {\n          var deviceMap = {};\n          devices.forEach(function( device ) {\n            deviceMap[device[\"_id\"]] = device;\n          }.bind(this));\n          this.cache.set(this.deviceType, deviceMap);\n          this.deviceData = deviceMap;\n        }\n        callback(err, this.deviceData);\n      }.bind(this));\n    }\n\n    buildAccessory(deviceData) {\n      return new ThermostatAccessory(deviceData, this);\n    }\n\n  }\n\n  return ThermostatDeviceType;\n\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/device/weatherstation-device.js":"'use strict';\n\nvar NetatmoDevice = require(\"../lib/netatmo-device\");\n\nvar homebridge;\nvar WeatherStationAccessory;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    WeatherStationAccessory = require(\"../accessory/weatherstation-accessory\")(homebridge);\n  }\n\n  class WeatherstationDeviceType extends NetatmoDevice {\n  \tconstructor(log, api, config) {\n      super(log, api, config);\n      this.log.debug(\"Creating Weatherstation Devices\");\n      this.deviceType = \"weatherstation\";\n    }\n\n    loadDeviceData(callback) {\n      this.api.getStationsData(function (err, devices) {\n        if(!err) {\n          var deviceMap = {};\n          devices.forEach(function( device ) {\n            deviceMap[device[\"_id\"]] = device;\n            device._name = device.station_name + \" \" + device.module_name\n            if (device.modules) {\n              device.modules.forEach(function( module ) {\n                module._name = device.station_name + \" \" + module.module_name\n                deviceMap[module._id] = module;\n              }.bind(this));\n            }\n          }.bind(this));\n          this.cache.set(this.deviceType, deviceMap);\n          this.deviceData = deviceMap;\n        }\n        callback(err, this.deviceData);\n      }.bind(this));\n    }\n\n    buildAccessory(deviceData) {\n      return new WeatherStationAccessory(deviceData, this);\n    }\n  }\n  \n  return WeatherstationDeviceType;\n\n}\n  ","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/lib/netatmo-accessory.js":"'use strict';\n\nvar inherits = require('util').inherits;\nvar Accessory, Service, Characteristic, uuid;\nvar homebridge;\n\nvar glob = require( 'glob' )\n  , path = require( 'path' );\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n    Accessory = homebridge.hap.Accessory;\n    Service = homebridge.hap.Service;\n  }\n\n  class NetatmoAccessory extends Accessory {\n    constructor(homebridge, accessoryConfig, netatmoDevice) {\n\n      var name = accessoryConfig.name || \"Netatmo \" + netatmoDevice.deviceType + \" \" + accessoryConfig.id; \n      var uid = homebridge.hap.uuid.generate('netatmo.' + accessoryConfig.netatmoType + '.' + accessoryConfig.id);\n      super(name, uid);\n\n      this.log = netatmoDevice.log;\n      this.config = netatmoDevice.config;\n      this.device = netatmoDevice;\n      this.id = accessoryConfig.id;\n      this.name = name;\n      this.deviceType = netatmoDevice.deviceType;\n      this.netatmoType = accessoryConfig.netatmoType;\n      this.firmware = accessoryConfig.firmware;\n      this.dataTypes = accessoryConfig.dataTypes;\n\n      this._configureAccessoryInformationService();\n      this._buildServices(accessoryConfig.defaultServices);\n    }\n\n    getServices() {\n      return this.services;\n    }\n\n    isSupportedService(serviceType) {\n      return ( this.configuredServices.indexOf(serviceType) > -1 );\n    }\n\n    _configureAccessoryInformationService() {\n\n      var accessoryInformationService = this.getService(Service.AccessoryInformation);\n\n      accessoryInformationService.getCharacteristic(Characteristic.FirmwareRevision)\n        || accessoryInformationService.addCharacteristic(Characteristic.FirmwareRevision);\n\n      accessoryInformationService\n        .setCharacteristic(Characteristic.Model, \"Netatmo \" + this.deviceType + \" (\" + this.netatmoType + \")\")\n        .setCharacteristic(Characteristic.SerialNumber, this.id)\n        .setCharacteristic(Characteristic.Manufacturer, \"Netatmo\")\n        .setCharacteristic(Characteristic.FirmwareRevision, this.firmware);\n    }\n\n    loadConfiguredServices(defaultServices) {\n      if (this.config[this.netatmoType]) {\n        this.configuredServices = this.config[this.netatmoType].services || this.config.services || defaultServices;\n      } else {\n        this.configuredServices = this.config.services || defaultServices;\n      }\n    }\n\n    notifyUpdate(deviceData) {\n      console.log(\"Method notifyUpdate should have been overriden \" + this.name);\n    }\n\n    _buildServices(defaultServices) {\n      this.loadConfiguredServices(defaultServices)\n      var serviceDir = path.dirname(__dirname) + '/service';\n      var globprefix = this.deviceType;\n\n      glob.sync( globprefix + '-*.js', { 'cwd': serviceDir } ).forEach(\n        function( file ) {\n          try {\n            var NetatmoService = require( serviceDir + '/' + file )(homebridge);\n            var svcName = file.slice(globprefix.length + 1, -3);\n            if(this.isSupportedService(svcName)) {\n              this.log.debug(\"Adding Service in \" + this.name + \": \" + svcName);\n\n              var service = new NetatmoService(this);\n              this.addService(service);\n\n            } else {\n              this.log.debug(\"Service not supported in \" + this.name + \": \"  + svcName);\n            }\n          } catch (err) {\n            this.log.warn(\"Could not process service file \" + file);\n            this.log.warn(err);\n            this.log.warn(err.stack); \n          }\n        }.bind(this)\n      );\n    }\n\n  }\n\n  return NetatmoAccessory;\n  \n\n  /*\n  var serviceDir = path.dirname(__dirname) + '/services';\n  var globprefix = netAtmoDevice.deviceType;\n  glob.sync( globprefix + '-*.js', { 'cwd': serviceDir } ).forEach( function( file ) {\n    try {\n      var service = require( serviceDir + '/' + file )(this, stationData);\n      if(this.isConfiguredService(file.slice(globprefix.length + 1, -3))) {\n        var serviceProvider = new service.ServiceProvider();\n        var services = serviceProvider.buildServices(this, stationData);\n        if (services) {\n          services.forEach(function(svc) {\n            this.addService(svc);\n          }.bind(this));\n        }\n      }\n    } catch (err) {\n      this.log(\"Could not process file \" + file);\n      this.log(err);\n      this.log(err.stack); \n    }\n  }.bind(this));\n  */\n\n}\n\n/*\nNetatmoAccessory.prototype.configuredServices = [];\nNetatmoAccessory.prototype.defaultServices    = [];\n\nNetatmoAccessory.prototype.isConfiguredService = function (serviceType) {\n  return ( this.configuredServices.indexOf(serviceType) > -1 );\n};\n\nNetatmoAccessory.prototype.getDashboardValue = function (name, callback) {\n  return this.device.getDashboardValue(this.deviceId, name, callback);\n}\n\nNetatmoAccessory.prototype.getData = function (callback) {\n  return this.device.getData(this.deviceId, callback);\n}\n\nNetatmoAccessory.prototype.getServices = function () {\n  return this.services;\n};\n\nNetatmoAccessory.prototype.supportsService = function (serviceType) {\n  return false;\n};\n*/\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/camera-motionsensor-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class MotionSensorService extends homebridge.hap.Service.MotionSensor {\n    constructor(accessory) {\n      super(accessory.name + \" Motion Sensor\");\n      this.accessory = accessory;\n\n      this.getCharacteristic(Characteristic.MotionDetected)\n        .on('get', this.getMotionDetected.bind(this))\n        .eventEnabled = true;\n\n  /*\n  // Optional Characteristics\n  this.addOptionalCharacteristic(Characteristic.StatusActive);\n  this.addOptionalCharacteristic(Characteristic.StatusFault);\n  this.addOptionalCharacteristic(Characteristic.StatusTampered);\n  this.addOptionalCharacteristic(Characteristic.StatusLowBattery);\n  */\n\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.MotionDetected)\n            .updateValue(this.accessory.motionDetected);\n    }\n\n    getMotionDetected(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.motionDetected);\n      }.bind(this));\n    }\n\n  }\n\n  return MotionSensorService;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/thermostat-battery-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class BatteryService extends homebridge.hap.Service.BatteryService {\n    constructor(accessory) {\n      super(accessory.name + \" Thermostat\");\n      this.accessory = accessory;\n\n      this.getCharacteristic(Characteristic.BatteryLevel)\n        .on('get', this.getBatteryLevel.bind(this))\n        .eventEnabled = true;\n      this.getCharacteristic(Characteristic.StatusLowBattery)\n        .on('get', this.getStatusLowBattery.bind(this))\n        .eventEnabled = true;\n      this.getCharacteristic(Characteristic.ChargingState)\n        .on('get', this.getChargingState.bind(this));\n    }\n    \n    getBatteryLevel(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.batteryPercent);\n      }.bind(this));\n    }\n\n    getStatusLowBattery(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.lowBattery ? Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW : Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL);\n      }.bind(this));\n    }\n\n    getChargingState(callback) {\n      callback(null, Characteristic.ChargingState.NOT_CHARGING);\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.BatteryLevel)\n            .updateValue(this.accessory.batteryPercent);\n      this.getCharacteristic(Characteristic.StatusLowBattery)\n            .updateValue(this.accessory.lowBattery ? Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW : Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL);\n    }\n  }\n  \n  return BatteryService;\n}","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/thermostat-thermostat-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class ThermostatService extends homebridge.hap.Service.Thermostat {\n    constructor(accessory) {\n      super(accessory.name + \" Thermostat\");\n      this.accessory = accessory;\n\n      this.temperatureDisplayUnits = Characteristic.TemperatureDisplayUnits.CELSIUS;\n\n      this.getCharacteristic(Characteristic.CurrentHeatingCoolingState)\n        .on('get', this.getCurrentHeatingCoolingState.bind(this))\n        .eventEnabled = true;\n\n      this.getCharacteristic(Characteristic.TargetHeatingCoolingState)\n        .on('get', this.getTargetHeatingCoolingState.bind(this))\n        .on('set', this.setTargetHeatingCoolingState.bind(this))\n        .eventEnabled = true;\n\n      this.getCharacteristic(Characteristic.CurrentTemperature)\n        .on('get', this.getCurrentTemperature.bind(this))\n        .eventEnabled = true;\n      \n      this.getCharacteristic(Characteristic.TargetTemperature)\n        .on('get', this.getTargetTemperature.bind(this))\n        .on('set', this.setTargetTemperature.bind(this))\n        .eventEnabled = true;\n      \n      this.getCharacteristic(Characteristic.TemperatureDisplayUnits)\n        .on('get', this.getTemperatureDisplayUnits.bind(this))\n        .on('set', this.setTemperatureDisplayUnits.bind(this));\n\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.CurrentHeatingCoolingState)\n            .updateValue(this.accessory.currentHeatingCoolingState);\n      this.getCharacteristic(Characteristic.TargetHeatingCoolingState)\n            .updateValue(this.accessory.targetHeatingCoolingState);\n      this.getCharacteristic(Characteristic.CurrentTemperature)\n            .updateValue(this.accessory.currentTemperature);\n      // TODO: Unter 10 -> Was tun?\n      this.getCharacteristic(Characteristic.TargetTemperature)\n            .updateValue(this.accessory.targetTemperature);\n    }\n\n    getCurrentHeatingCoolingState(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.currentHeatingCoolingState);\n      }.bind(this));\n    }\n\n    getCurrentTemperature(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.currentTemperature);\n      }.bind(this));\n    }\n\n    getTargetHeatingCoolingState(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.targetHeatingCoolingState);\n      }.bind(this));\n    }\n\n    setTargetHeatingCoolingState(value, callback) {\n\n        if (this.accessory.targetHeatingCoolingState === value) {\n            callback(null, value);\n            return;\n        }\n\n        switch (value) {\n          case Characteristic.TargetHeatingCoolingState.OFF:\n            this.accessory.setThermpoint('off', this.accessory.targetTemperature, function(err, data) {\n              callback(err, value);\n            }.bind(this));\n            break;\n          case Characteristic.TargetHeatingCoolingState.COOL:\n            this.accessory.setThermpoint('hg', this.accessory.targetTemperature, function(err, data) {\n              callback(err, value);\n            }.bind(this));\n            break;\n          case Characteristic.TargetHeatingCoolingState.HEAT:\n            this.accessory.setThermpoint('max', this.accessory.targetTemperature, function(err, data) {\n              callback(err, value);\n            }.bind(this));\n            break;\n          default: // Characteristic.TargetHeatingCoolingState.AUTO:\n            this.accessory.setThermpoint('program', this.accessory.targetTemperature, function(err, data) {\n              callback(err, value);\n            }.bind(this));\n        }\n    }\n\n    getTargetTemperature(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.targetTemperature);\n      }.bind(this));\n    }\n\n    setTargetTemperature(value, callback) {\n      if (value > 30) {\n        value = 30;\n      }\n\n      if (value == this.accessory.targetTemperature) {\n        callback(null, value);\n        return;\n      }\n\n      this.accessory.setThermpoint('manual', value, function(err, data) {\n        callback(err, value);\n      }.bind(this));\n\n    }\n\n    // TODO: Fahrenheit\n    getTemperatureDisplayUnits(callback) {\n      callback(null, this.temperatureDisplayUnits);\n    }\n\n    setTemperatureDisplayUnits(value, callback) {\n      this.temperatureDisplayUnits = value;\n    //currentTemperature.setProps({ unit: value});\n      callback(null, this.temperatureDisplayUnits);\n    }\n  }\n\n  return ThermostatService;\n}\n ","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-airpressure-legacy.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nconst ATMOSPHERIC_PRESSURE_STYPE_ID = \"B77831FD-D66A-46A4-B66D-FD7EE8DFE3CE\";\n//Elgato\nconst ATMOSPHERIC_PRESSURE_CTYPE_ID = \"E863F10F-079E-48FF-8F27-9C2605A29F52\";\n//const ATMOSPHERIC_PRESSURE_CTYPE_ID = \"28FDA6BC-9C2A-4DEA-AAFD-B49DB6D155AB\";\n\n/*\nconst ATMOSPHERIC_PRESSURE_STYPE_ID = \"B77831FD-D66A-46A4-B66D-FD7EE8DFE3CE\";\nconst ATMOSPHERIC_PRESSURE_CTYPE_ID = \"28FDA6BC-9C2A-4DEA-AAFD-B49DB6D155AB\";\nvar EVE_WEATHER_SERVICE_STYPE_ID = 'E863F001-079E-48FF-8F27-9C2605A29F52';\nvar EVE_AIR_PRESSURE_CTYPE_ID = \"E863F10F-079E-48FF-8F27-9C2605A29F52\";\n*/\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class AtmosphericPressureCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Atmospheric Pressure', ATMOSPHERIC_PRESSURE_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.UINT8,\n        unit: \"hPA\", \n        minValue: 500,\n        maxValue: 2000,\n        minStep: 0.1,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  } \n\n  class AirPressureService extends homebridge.hap.Service {\n    constructor(accessory) {\n      super(accessory.name + \" Air Pressure\", ATMOSPHERIC_PRESSURE_STYPE_ID);\n      this.accessory = accessory;\n\n      this.addCharacteristic(AtmosphericPressureCharacteristic)\n        .on('get', this.getAtmosphericPressure.bind(this))\n        .eventEnabled = true;\n\n      // this.addOptionalCharacteristic(Characteristic.StatusActive);\n      // this.addOptionalCharacteristic(Characteristic.StatusFault);\n      this.addOptionalCharacteristic(Characteristic.Name);\n      \n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(AtmosphericPressureCharacteristic)\n            .updateValue(this.accessory.airPressure);\n    }\n\n    getAtmosphericPressure(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.airPressure);\n      }.bind(this));\n    }\n\n  }\n\n  return AirPressureService;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-airquality-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class AirQualityService extends homebridge.hap.Service.AirQualitySensor {\n    constructor(accessory) {\n      super(accessory.name + \" Air Quality\");\n      this.accessory = accessory;\n\n      this.getCharacteristic(Characteristic.AirQuality)\n        .on('get', this.getAirQuality.bind(this))\n        .eventEnabled = true;\n\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.AirQuality)\n            .updateValue(this.transformCO2ToAirQuality());\n    }\n\n    getAirQuality(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.transformCO2ToAirQuality());\n      }.bind(this));\n    }\n\n    transformCO2ToAirQuality() {\n      var level = this.accessory.co2;\n      var quality = Characteristic.AirQuality.UNKNOWN;\n\n      if (level > 2000) quality = Characteristic.AirQuality.POOR;\n      else if (level > 1500) quality = Characteristic.AirQuality.INFERIOR;\n      else if (level > 1000) quality = Characteristic.AirQuality.FAIR;\n      else if (level > 500) quality = Characteristic.AirQuality.GOOD;\n      else if (level > 0) quality = Characteristic.AirQuality.EXCELLENT;\n  \n      return quality;\n    }\n\n  }\n\n  return AirQualityService;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-battery-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class BatteryService extends homebridge.hap.Service.BatteryService {\n    constructor(accessory) {\n      super(accessory.name + \" Battery Level\");\n      this.accessory = accessory;\n\n      this.getCharacteristic(Characteristic.BatteryLevel)\n        .on('get', this.getBatteryLevel.bind(this))\n        .eventEnabled = true;\n      this.getCharacteristic(Characteristic.StatusLowBattery)\n        .on('get', this.getStatusLowBattery.bind(this))\n        .eventEnabled = true;\n      this.getCharacteristic(Characteristic.ChargingState)\n        .on('get', this.getChargingState.bind(this));\n    }\n    \n    getBatteryLevel(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.batteryPercent);\n      }.bind(this));\n    }\n\n    getStatusLowBattery(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.lowBattery ? Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW : Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL);\n      }.bind(this));\n    }\n\n    getChargingState(callback) {\n      callback(null, Characteristic.ChargingState.NOT_CHARGING);\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.BatteryLevel)\n            .updateValue(this.accessory.batteryPercent);\n      this.getCharacteristic(Characteristic.StatusLowBattery)\n            .updateValue(this.accessory.lowBattery ? Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW : Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL);\n    }\n  }\n  \n  return BatteryService;\n}","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-co2-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class CarbonDioxideService extends homebridge.hap.Service.CarbonDioxideSensor {\n    constructor(accessory) {\n      super(accessory.name + \" Carbon Dioxide\");\n      this.accessory = accessory;\n\n      this.getCharacteristic(Characteristic.CarbonDioxideDetected)\n        .on('get', this.getCarbonDioxideDetected.bind(this))\n        .eventEnabled = true;\n\n      var co2LevelCharacteristic = this.getCharacteristic(Characteristic.CarbonDioxideLevel)\n                                          || this.addCharacteristic(Characteristic.CarbonDioxideLevel);\n\n      co2LevelCharacteristic.on('get', this.getCarbonDioxideLevel.bind(this))\n                            .eventEnabled = true;\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.CarbonDioxideDetected)\n            .updateValue(this.transformCO2ToCarbonDioxideDetected());\n      this.getCharacteristic(Characteristic.CarbonDioxideLevel)\n            .updateValue(this.accessory.co2);\n    }\n\n    getCarbonDioxideDetected(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.transformCO2ToCarbonDioxideDetected());\n      }.bind(this));\n    }\n\n    getCarbonDioxideLevel(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.co2);\n      }.bind(this));\n    }\n\n    transformCO2ToCarbonDioxideDetected() {\n      return (this.accessory.co2 > 1000 ? Characteristic.CarbonDioxideDetected.CO2_LEVELS_ABNORMAL : Characteristic.CarbonDioxideDetected.CO2_LEVELS_NORMAL);\n    }\n  }\n\n  return CarbonDioxideService;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-humidity-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class HumidityService extends homebridge.hap.Service.HumiditySensor {\n    constructor(accessory) {\n      super(accessory.name + \" Humidity\");\n      this.accessory = accessory;\n\n      this.getCharacteristic(Characteristic.CurrentRelativeHumidity)\n        .on('get', this.getCurrentRelativeHumidity.bind(this))\n        .eventEnabled = true;\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.CurrentRelativeHumidity)\n            .updateValue(this.accessory.humidity);\n    }\n\n    getCurrentRelativeHumidity(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.humidity);\n      }.bind(this));\n    }\n  }\n\n  return HumidityService;\n}\n\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-noiselevel-legacy.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nconst NOISE_LEVEL_STYPE_ID = \"8C85FD40-EB20-45EE-86C5-BCADC773E580\";\nconst NOISE_LEVEL_CTYPE_ID = \"2CD7B6FD-419A-4740-8995-E3BFE43735AB\";\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class NoiseLevelCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Noise Level', NOISE_LEVEL_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.UINT8,\n        unit: \"dB\",\n        minValue: 0,\n        maxValue: 200,\n        minStep: 1,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  }\n\n  class NoiseLevelService extends homebridge.hap.Service {\n    constructor(accessory) {\n      super(accessory.name + \" Noise Level\", NOISE_LEVEL_STYPE_ID);\n      this.accessory = accessory;\n\n      this.addCharacteristic(NoiseLevelCharacteristic)\n        .on('get', this.getNoiseLevel.bind(this))\n        .eventEnabled = true;\n\n      // this.addOptionalCharacteristic(Characteristic.StatusActive);\n      // this.addOptionalCharacteristic(Characteristic.StatusFault);\n      // this.addOptionalCharacteristic(Characteristic.StatusTampered);\n      this.addOptionalCharacteristic(Characteristic.Name);\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(NoiseLevelCharacteristic)\n            .updateValue(this.accessory.noiseLevel);\n    }\n\n    getNoiseLevel(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.noiseLevel);\n      }.bind(this));\n    }\n\n  }\n\n  return NoiseLevelService;\n}    \n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-rain-legacy.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nconst RAIN_LEVEL_STYPE_ID = \"D92D5391-92AF-4824-AF4A-356F25F25EA1\";\nconst RAIN_LEVEL_CTYPE_ID = \"C53F35CE-C615-4AA4-9112-EBF679C5EB14\";\nconst RAIN_LEVEL_SUM_1H_CTYPE_ID = \"11646117-878C-456B-A770-3924151F773D\";\nconst RAIN_LEVEL_SUM_24H_CTYPE_ID = \"E67DDC66-BEB7-4D0C-BD0C-022DB570DABC\";\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class RainLevelCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Rain Level', RAIN_LEVEL_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.FLOAT,\n        unit: \"mm\",\n        minValue: 0,\n        maxValue: 1000,\n        minStep: 0.001,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  }\n\n  class RainLevelSum1Characteristic extends Characteristic {\n    constructor(accessory) {\n      super('Rain Level (1 hour)', RAIN_LEVEL_SUM_1H_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.FLOAT,\n        unit: \"mm\",\n        minValue: 0,\n        maxValue: 1000,\n        minStep: 0.001,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  }\n\n  class RainLevelSum24Characteristic extends Characteristic {\n    constructor(accessory) {\n      super('Rain Level (24 hours)', RAIN_LEVEL_SUM_24H_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.FLOAT,\n        unit: \"mm\",\n        minValue: 0,\n        maxValue: 1000,\n        minStep: 0.001,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  }\n\n  class RainLevelService extends homebridge.hap.Service {\n    constructor(accessory) {\n      super(accessory.name + \" Rain Level\", RAIN_LEVEL_STYPE_ID);\n      this.accessory = accessory;\n\n      this.addCharacteristic(RainLevelCharacteristic)\n        .on('get', this.getRainLevel.bind(this))\n        .eventEnabled = true;\n      this.addCharacteristic(RainLevelSum1Characteristic)\n        .on('get', this.getRainLevelSum1.bind(this))\n        .eventEnabled = true;\n      this.addCharacteristic(RainLevelSum24Characteristic)\n        .on('get', this.getRainLevelSum24.bind(this))\n        .eventEnabled = true;\n\n      this.addOptionalCharacteristic(Characteristic.Name);\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(RainLevelCharacteristic)\n            .updateValue(this.accessory.rainLevel);\n      this.getCharacteristic(RainLevelSum1Characteristic)\n            .updateValue(this.accessory.rainLevelSum1);\n      this.getCharacteristic(RainLevelSum24Characteristic)\n            .updateValue(this.accessory.rainLevelSum24);\n    }\n\n    getRainLevel(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.rainLevel);\n      }.bind(this));\n    }\n\n    getRainLevelSum1(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.rainLevelSum1);\n      }.bind(this));\n    }\n\n    getRainLevelSum24(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.rainLevelSum24);\n      }.bind(this));\n    }\n  }\n\n  return RainLevelService;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-temperature-homekit.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class TemperatureService extends homebridge.hap.Service.TemperatureSensor {\n    constructor(accessory) {\n      super(accessory.name + \" Temperature\");\n      this.accessory = accessory;\n\n      var tmpChar = this.getCharacteristic(Characteristic.CurrentTemperature);\n      tmpChar.setProps({ minValue: -100 });\n      tmpChar.on('get', this.getCurrentTemperature.bind(this));\n      tmpChar.eventEnabled = true;\n\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(Characteristic.CurrentTemperature)\n            .updateValue(this.accessory.currentTemperature);\n    }\n\n    getCurrentTemperature(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.currentTemperature);\n      }.bind(this));\n    }\n  }\n\n  return TemperatureService;\n}\n\n/*\n  if(stationData.data_type.indexOf('Temperature') > -1) {\n    services.push(this.buildTemperatureSensor(accessory, stationData));\n  }\n*/\n","/home/travis/build/npmtest/node-npmtest-homebridge-netatmo/node_modules/homebridge-netatmo/service/weatherstation-wind-legacy.js":"'use strict';\n\nvar homebridge;\nvar Characteristic;\n\nconst WIND_MEASURE_STYPE_ID = \"2AFB775E-79E5-4399-B3CD-398474CAE86C\";\nconst WIND_STRENGTH_CTYPE_ID = \"9331096F-E49E-4D98-B57B-57803498FA36\";\nconst WIND_ANGLE_CTYPE_ID = \"6C3F6DFA-7340-4ED4-AFFD-0E0310ECCD9E\";\nconst GUST_STRENGTH_CTYPE_ID = \"1B7F2F7B-EABF-4A54-8F9D-ABBEE08E8A64\";\nconst GUST_ANGLE_CTYPE_ID = \"928BD7DE-1CAA-4472-BBEF-0A9166B7949F\";\n\nmodule.exports = function(pHomebridge) {\n  if (pHomebridge && !homebridge) {\n    homebridge = pHomebridge;\n    Characteristic = homebridge.hap.Characteristic;\n  }\n\n  class WindStrengthCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Wind Strength', WIND_STRENGTH_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.UINT8,\n              format: Characteristic.Formats.UINT8,\n        unit: \"km/h\",\n        minValue: 0,\n        maxValue: 200,\n        minStep: 1,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  } \n\n  class WindAngleCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Wind Angle', WIND_ANGLE_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.UINT8,\n        unit: \"deg\",\n        minValue: 0,\n        maxValue: 360,\n        minStep: 1,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  } \n\n  class GustStrengthCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Gust Strength', GUST_STRENGTH_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.UINT8,\n              format: Characteristic.Formats.UINT8,\n        unit: \"km/h\",\n        minValue: 0,\n        maxValue: 200,\n        minStep: 1,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  }\n\n  class GustAngleCharacteristic extends Characteristic {\n    constructor(accessory) {\n      super('Gust Angle', GUST_ANGLE_CTYPE_ID);\n      this.setProps({\n        format: Characteristic.Formats.UINT8,\n        unit: \"deg\",\n        minValue: 0,\n        maxValue: 360,\n        minStep: 1,\n        perms: [\n          Characteristic.Perms.READ,\n          Characteristic.Perms.NOTIFY\n        ]\n      });\n      this.value = this.getDefaultValue();\n    }\n  }\n\n  class WindService extends homebridge.hap.Service {\n    constructor(accessory) {\n      super(accessory.name + \" Wind Sensor\", WIND_MEASURE_STYPE_ID);\n      this.accessory = accessory;\n\n      this.addCharacteristic(WindStrengthCharacteristic)\n        .on('get', this.getWindStrength.bind(this))\n        .eventEnabled = true;\n      this.addCharacteristic(WindAngleCharacteristic)\n        .on('get', this.getWindAngle.bind(this))\n        .eventEnabled = true;\n      this.addCharacteristic(GustStrengthCharacteristic)\n        .on('get', this.getGustStrength.bind(this))\n        .eventEnabled = true;\n      this.addCharacteristic(GustAngleCharacteristic)\n        .on('get', this.getGustAngle.bind(this))\n        .eventEnabled = true;\n\n      this.addOptionalCharacteristic(Characteristic.Name);\n    }\n\n    updateCharacteristics() {\n      this.getCharacteristic(WindStrengthCharacteristic)\n            .updateValue(this.accessory.windStrength);\n      this.getCharacteristic(WindAngleCharacteristic)\n            .updateValue(this.accessory.windAngle);\n      this.getCharacteristic(GustStrengthCharacteristic)\n            .updateValue(this.accessory.gustStrength);\n      this.getCharacteristic(GustAngleCharacteristic)\n            .updateValue(this.accessory.gustAngle);\n    }\n\n    getWindStrength(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.windStrength);\n      }.bind(this));\n    }\n\n    getWindAngle(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.windAngle);\n      }.bind(this));\n    }\n\n    getGustStrength(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.gustStrength);\n      }.bind(this));\n    }\n\n    getGustAngle(callback) {\n      this.accessory.refreshData(function(err,data) {\n        callback(err, this.accessory.gustAngle);\n      }.bind(this));\n    }\n  }\n\n  return WindService;\n}\n"}